{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2025-05-04T01:09:51.217048+00:00",
  "repo": "identitymonk/draft-lombardo-oauth-client-extension-claims",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 8,
      "id": "I_kwDOOEwV6s6yOy1u",
      "title": "Backwards compatibility",
      "url": "https://github.com/identitymonk/draft-lombardo-oauth-client-extension-claims/issues/8",
      "state": "OPEN",
      "author": "0x73746F66",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The specification assumes backward compatibility won't be an issue, but doesn't address how existing resource servers might misinterpret these new claims",
      "createdAt": "2025-04-12T05:09:16Z",
      "updatedAt": "2025-04-14T01:54:25Z",
      "closedAt": null,
      "comments": [
        {
          "author": "0x73746F66",
          "authorAssociation": "NONE",
          "body": "The draft contains only one explicit mention of backward compatibility, but there are several implied references or considerations throughout the document\n\nSection 4\n> Note that the non presence of support_client_extentison_claims is sufficient for the client to determine that the server is not capable and therefore will not return the extension claimns described in this RFC. This ensures backward compatibility with all existing AS implementations.\n\nThis is the only explicit mention of backward compatibility in the document. It specifies that the absence of the metadata parameter means the server doesn't support the new claims, allowing older authorisation servers to operate without changes. Seemingly. However, this assumption may not address all potential compatibility problems that arise when the introduced extensions are encountered by these older servers in unintended ways such as conflicting claims.\n\nPotential Issues\n\n- Older authorisation servers might encounter requests that include parameters related to the new claims, potentially causing parser failures if they strictly validate input parameters\n- Even if older servers don't crash, they might process requests with extension-related parameters in unexpected ways\n-  Proxy servers, API gateways, or token transformation services might incorrectly process or strip these claims if they're unaware of the extension semantics (The current approach relies on the `support_client_extension_claims` metadata parameter and is a semantic combination)\n\nSuggestions\n\n- Prefix new claims with a namespace to reduce collision risk with custom implementations and make them more easily identifiable `\"ext:cxt\": [\"pkce\", \"dpop\"]`\n- Take a progressive enhancement approach, a discovery mechanism that allows clients to query authorization servers about supported features before making an initial request that depend on these extensions\n- Specify how clients should degrade gracefully when they encounter servers that don't support these extensions, including explicit fallback behaviors\n- Require clients to explicitly request these claims using a parameter, ensuring servers that don't understand this parameter won't receive unexpected inputs\n",
          "createdAt": "2025-04-12T12:01:19Z",
          "updatedAt": "2025-04-12T12:01:19Z"
        },
        {
          "author": "0x73746F66",
          "authorAssociation": "NONE",
          "body": "I acknowledge Section 6 indicates that existing validation processes remain unchanged, suggesting backward compatibility for token validation\n\nBut section 4 mentions clearly that absence of the parameter ensures backward compatibility, it doesn't address how clients should behave when discovering a non-supporting server when using the extension.\n\nSection 3.2 ambiguity bothers me, he optional nature of these claims could lead to inconsistent implementation behaviors, there's no guidance on how these claims affect token validation in mixed-version environments\n\nThe draft would benefit from a dedicated backward compatibility section",
          "createdAt": "2025-04-12T12:08:51Z",
          "updatedAt": "2025-04-12T12:08:51Z"
        },
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "There are multiple elements raised through this issue for which, it seems, you mistake Query String Parameters when talking to the AS vs the proposal for claims to be inserted in JWT at issuance by AS.\n\n- **Older authorisation servers might encounter requests that include parameters related to the new claims, potentially causing parser failures if they strictly validate input parameters**\n\nI think you misread the specification proposal. The specification DOES NOT require any additional parameter at the time Authorization request or at the time at the Token request. The only thing that this specification is saying is that the AS, if respecting this specification when GA, issues JWT profiled OAuth2 Access Token it MUST express what was used for client authentication through 2 mandatory claims, and SHOULD  express what was used for client authentication through 2 optional claims to help Resource Providers take an access control decision. Therefore Client cannot confuse AS.\n\n- **Even if older servers don't crash, they might process requests with extension-related parameters in unexpected ways**\n\nAS do not process any additional parameter therefore there no unexpected processing and results. Also Clients are related to AS through either proactive and static client registration or [dynamic client registration (RFC7591)](https://datatracker.ietf.org/doc/html/rfc7591). Therefore they have credentials, need to use a grant flow to interact with the AS, which my require extensions. All of those are described in existing official RFC. This specification proposal just require to express the mean used explicitly in the issued JWT profile OAuth2 Access Token for the benefice of the Resource Provider.\n\n- **Proxy servers, API gateways, or token transformation services might incorrectly process or strip these claims if they're unaware of the extension semantics**\n\nAgain those are not query string parameters expected by the AS, therefore nothing is asked to be provided by Proxy servers and API gateways.\n\nAs we are talking about claims of JWT profiled OAuth2 Access Tokens, Proxy servers  and API Gateway cannot strip those from the tokens without breaking the JWS signature. Globally Proxy servers and API Gateways have no interest in doing this and SHALL NOT attempt to do it.\n\n- **The current approach relies on the support_client_extension_claims metadata parameter and is a semantic combination**\n\nI realized that I need to put more details in the purpose of `support_client_extension_claims`. \n\nThis metadata claim is here to indicate to Resource Provider (as it is the case for the document that will bear it, the [Authorization Server Metadata (RFC8414)](https://datatracker.ietf.org/doc/html/rfc8414), as it made to guide the Resource Provider into making a more dynamic access control decision. If the AS has `support_client_extension_claims ` set to `true`, the RP knows it can send a 401/403 with an explicit request for those claims to be provided as a guidance to the Client if the Client wants to make a second attempt with a new token issued by the AS.\n\n",
          "createdAt": "2025-04-13T19:50:14Z",
          "updatedAt": "2025-04-13T20:01:33Z"
        },
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "Therefore on the suggestions:\n\n- Prefix new claims with a namespace to reduce collision risk with custom implementations and make them more easily identifiable \"ext:cxt\": [\"pkce\", \"dpop\"]\n  - I understand the ask, but here we want to define new official OAuth2 Claims that we will register with IANA. As many RFC beyond the intinal Core Framework of OAuth2 defined. We will stick with this state of the proposal until discussed within the IETF working Group.\n- Take a progressive enhancement approach, a discovery mechanism that allows clients to query authorization servers about supported features before making an initial request that depend on these extensions\n  - This is not a specification that changes how the Authorization nor the Token request are made and which parameter they need based on the grant flow selected. Threrefore this is not applicable here. Therefore there is no need for the proposed suggestion.\n- Specify how clients should degrade gracefully when they encounter servers that don't support these extensions, including explicit fallback behaviors\n  - Again this is not a specification that changes how the Authorization nor the Token request are made and which parameter they need based on the grant flow selected. Therefore there is no action to take from the client perspective, and there is no downgrade option to plan. AS supports the proposed specification and issue the mandatory claim and, if capable applicable, the optional claims as part of the issued JWT profiled OAuth2 Access Token.\n- Require clients to explicitly request these claims using a parameter, ensuring servers that don't understand this parameter won't receive unexpected inputs\n  - Again, this is about something the client has to express, Therefore there is no need for an explicit Authorization not Token request parameter.",
          "createdAt": "2025-04-13T19:57:49Z",
          "updatedAt": "2025-04-13T19:57:49Z"
        },
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "If you agree on those then, I propose to make:\n\n- [4. ](https://identitymonk.github.io/draft-lombardo-oauth-client-extension-claims/draft-lombardo-oauth-client-extension-claims.html#section-4)[Authorization Server Metadata](https://identitymonk.github.io/draft-lombardo-oauth-client-extension-claims/draft-lombardo-oauth-client-extension-claims.html#name-authorization-server-metada) clearer by indicating that `support_client_extentison_claims` is made to guide Resource Provider\n- [5. ](https://identitymonk.github.io/draft-lombardo-oauth-client-extension-claims/draft-lombardo-oauth-client-extension-claims.html#section-5)[Requesting a JWT Access Token with Client Extensions](https://identitymonk.github.io/draft-lombardo-oauth-client-extension-claims/draft-lombardo-oauth-client-extension-claims.html#name-requesting-a-jwt-access-tok) clearer on the fact that nothing is changed from how the Authorization and Token requests are made for the grant flow selected. Therefore no specific additional parameter is introduced in the proposed specification",
          "createdAt": "2025-04-13T20:02:55Z",
          "updatedAt": "2025-04-13T20:02:55Z"
        },
        {
          "author": "0x73746F66",
          "authorAssociation": "NONE",
          "body": "These are great actions to take, I'll not have time for a few days to agree that these are the only take aways from the thread because just a first read I feel a lot of assumptions were made and I am not confident the core concerns were understood or addressed with these kinds of responses ",
          "createdAt": "2025-04-14T01:54:24Z",
          "updatedAt": "2025-04-14T01:54:24Z"
        }
      ]
    },
    {
      "number": 9,
      "id": "I_kwDOOEwV6s6yOy8h",
      "title": "clarify the order of extensions",
      "url": "https://github.com/identitymonk/draft-lombardo-oauth-client-extension-claims/issues/9",
      "state": "CLOSED",
      "author": "0x73746F66",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The cxt claim is an array, but the specification doesn't clarify if the order of extensions has semantic significance, potentially leading to inconsistent interpretations",
      "createdAt": "2025-04-12T05:10:11Z",
      "updatedAt": "2025-04-14T01:47:38Z",
      "closedAt": "2025-04-13T20:38:33Z",
      "comments": [
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "Order has no bearing here, order is not important, therefore the willingful choice of JSON array.\n\nDPoP over PKCE vs PKCE over DPoP does not change anything for example. What is expected here is to understand what grant type extensions as been used as part of the process for issuance of the JWT profiled OAuth2 Access Token. The different RFC of PKCE, DPoP, and others are dealing with how those different extensions need to be approached to be secure.",
          "createdAt": "2025-04-13T20:38:27Z",
          "updatedAt": "2025-04-13T20:38:27Z"
        },
        {
          "author": "0x73746F66",
          "authorAssociation": "NONE",
          "body": "I see you have well articulated arguments for beliefs, but there's almost nothing in there that addresses the concern.\n\nReopen if you have curiosity about this concern and interested in discussing why this order of evaluation can lead to unexpected results ",
          "createdAt": "2025-04-14T01:47:37Z",
          "updatedAt": "2025-04-14T01:47:37Z"
        }
      ]
    },
    {
      "number": 10,
      "id": "I_kwDOOEwV6s6yOzCb",
      "title": "Resilience mechanisms for spoofed parameters",
      "url": "https://github.com/identitymonk/draft-lombardo-oauth-client-extension-claims/issues/10",
      "state": "OPEN",
      "author": "0x73746F66",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "support_client_extension_claims metadata parameter can be spoofed, and is a fundamental flaw to rely on it for metadata discovery, which I lack the required intelligence to imagine a mitigation",
      "createdAt": "2025-04-12T05:11:06Z",
      "updatedAt": "2025-04-14T14:14:14Z",
      "closedAt": null,
      "comments": [
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "Can be spoofed is network level risk for which we provide two elements of guidance:\n- By extending [RFC8414 - Authorization Server Metadata](https://www.rfc-editor.org/rfc/rfc8414) and especially section [3](https://www.rfc-editor.org/rfc/rfc8414#section-3) which itself is bound by [RFC5785 - Defining Well-Known Uniform Resource Identifiers (URIs)](https://www.rfc-editor.org/rfc/rfc5785) which address part of the question here by assuring the `.well-known` is composed from the `issuer` identifier value configured client side. I recognize that there is a missing link with the OpenID Connect Core which defines it as a:\n> case-sensitive URL using the https scheme that contains scheme, host, and optionally, port number and path components and no query or fragment components. \n  - This means that `https` is used which should assure a certain level of origin guarantee through control of TLS termination by Server Certificate authentication.\n- By disposing of the ability, by extension of [RFC8414 - Authorization Server Metadata](https://www.rfc-editor.org/rfc/rfc8414) , to benefit from section [2.1](https://www.rfc-editor.org/rfc/rfc8414#section-2.1).  Signed Authorization Server Metadata for higher assurance use cases.\n\nDo you think this is sufficient?",
          "createdAt": "2025-04-13T20:35:51Z",
          "updatedAt": "2025-04-13T20:35:51Z"
        },
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "Overall if you think that this parameter is at risk of spoofing, then the whole ecosystem of OAuth2 / OpenID Connect is spoofable. If you think that OAuth2 / OpenID Connect provide proper spoofing protection mechanisms and guidance for higher assurance use-cases, then this specification is as it builds on top of it.",
          "createdAt": "2025-04-13T20:41:12Z",
          "updatedAt": "2025-04-13T20:41:12Z"
        },
        {
          "author": "0x73746F66",
          "authorAssociation": "NONE",
          "body": "> Overall if you think that this parameter is at risk of spoofing, then the whole ecosystem of OAuth2 / OpenID Connect is spoofable. If you think that OAuth2 / OpenID Connect provide proper spoofing protection mechanisms and guidance for higher assurance use-cases, then this specification is as it builds on top of it.\n\nThat's quite a hyperbolic dismissal there, just because something can be misused and abused in discrete ways doesn't discount an entire ecosystem.\n\nPerhaps think more critically about read before verification, and canonicalisation of vectors for signatures, or interpretation of the 'plain text' JSON in advance of security operations (like using a payload digest supplied in the request as a mistake vs having reproducing the digest independently on the server because vectors are expected and the digest includes idempotent characteristics - which was a fatal flaw in hawkauth that was never resolved and led to hawkauth being abandoned entirely in a broken state\n\nDon't let the baby get thrown out with the bath water - let's think more critically \n",
          "createdAt": "2025-04-14T02:01:06Z",
          "updatedAt": "2025-04-14T02:01:06Z"
        },
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "I don't disagree with the critical thinking here. I am only looking at the applicability of it to this specification proposal.\n\nWhat I get out of your point is that what i described at https://github.com/identitymonk/draft-lombardo-oauth-client-extension-claims/issues/10#issuecomment-2800113846 should be a dedicated sub section of the [Security section](https://identitymonk.github.io/draft-lombardo-oauth-client-extension-claims/draft-lombardo-oauth-client-extension-claims.html#name-security-considerations)",
          "createdAt": "2025-04-14T14:14:13Z",
          "updatedAt": "2025-04-14T14:14:13Z"
        }
      ]
    },
    {
      "number": 11,
      "id": "I_kwDOOEwV6s6yOzI4",
      "title": "Revocation?",
      "url": "https://github.com/identitymonk/draft-lombardo-oauth-client-extension-claims/issues/11",
      "state": "OPEN",
      "author": "0x73746F66",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "There's no discussion of how client credential revocation affects tokens containing these claims, potentially allowing compromised clients to retain access",
      "createdAt": "2025-04-12T05:11:43Z",
      "updatedAt": "2025-05-03T02:15:44Z",
      "closedAt": null,
      "comments": [
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "JWT are stateless unless Token Introspection or Token Status List are implemented. What should happen when you revoke a token or a client is outside the scope of this proposal.\n\nRevocation does not change that, at the time of issuance, a client (identified by client_id) was authenticated following a dedicated method (that we ask to be described in the `ccm` claim) as part of an OAuth2 grant flow type (that we ask to be described in the `gty` claim) with potentially some extension like PKCE, DPoP, ect. (that we ask to be described in the `cext` claim) and that this mechanism might have a business client authentication assurance level (that we ask to be described in the `ccr` claim).\n\nIf someone wants to described the influence of client credential revocation over the revocation of the tokens, it should be done as a distinct internet draft as it is an important topic. But this topic exists whatever our proposal makes it to an RFC or not. I would recommend anyone wanting to dive into this to look at [OpenID Foundation Shared Signals Framwork WG](https://openid.net/wg/sharedsignals/)\n",
          "createdAt": "2025-04-13T20:17:22Z",
          "updatedAt": "2025-04-13T20:17:22Z"
        },
        {
          "author": "0x73746F66",
          "authorAssociation": "NONE",
          "body": "With a flaw in your thought procvess, early on, the rest needs to be rethought\n\n> JWT are stateless unless Token Introspection or Token Status List are implemented. What should happen when you revoke a token or a client is outside the scope of this proposal.\n\nCan be stateless, not \"are\" stateless/\n\nIn a system, the jwt is a intrinsic to the signature, which is extended to PKI in most implementations - which can have revoked public key and thus a JWT signature verification check should fail (this is described clearly on the jwt.io introduction page), a lot of devs _want_ a stateless jwt, and think that it is on hopes and wishes but never read the intro page to understand them correctly.\n\nNot sure where client credential came into this, maybe start again with the new knowledge of JWT workings?",
          "createdAt": "2025-04-25T13:55:14Z",
          "updatedAt": "2025-04-25T13:55:14Z"
        },
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "You mistake PKI for Cryptography. There is no PKI in OAuth2 nor OIDC. Public keys (which are not certificates) are published as JWK in JWKS Endpoint and token are stateless <period>\n\nIn OAuth2, revocation is not core, it is an extension therefore my comments on Status List and Introspection.\n\nI brought Client authentication credential revocation as a mean to try to understand where you were going to.",
          "createdAt": "2025-04-28T20:43:54Z",
          "updatedAt": "2025-04-28T20:43:54Z"
        },
        {
          "author": "0x73746F66",
          "authorAssociation": "NONE",
          "body": "> You mistake PKI for Cryptography. There is no PKI in OAuth2 nor OIDC. Public keys (which are not certificates) are published as JWK in JWKS Endpoint and token are stateless <period>\n> \n> In OAuth2, revocation is not core, it is an extension therefore my comments on Status List and Introspection.\n> \n> I brought Client authentication credential revocation as a mean to try to understand where you were going to.\n\nI'll explain \ud83d\udc4d\n\n> and token are stateless <period>\n\nThat is dogma, period.\n\nI already described inherent dynamic dependencies, you even specified one yourself (JWKS). I'd like to avoid this digression to keep this discussion on topic, however dogma will only serve to further confuse matters.. Allow me to explain how stateless is not the same as declarative - signed things, like claims with dynamic dependencies in a JWT are best described as a declaration, making the token declarative rather than 'stateless'. If it were to be defined as 'stateless', that would require the claims 'meaning' to never change. When using the signed information for decisions, it must remain unaffected by external dependencies like a JWKS, to be stateless.\n\nLet's avoid using 'stateless' because words like that matter (or you wouldn't emphasize the dogma), it's clearly declarative, by definition, ans it has dynamic dependencies that can effect decisions when evaluating its declared claims.\n\n> There is no PKI in OAuth2 nor OIDC\n\nJWKS is, inherently, PKI\n\n> Public keys (which are not certificates) \n\nSince you're referring to 'certificates' you might want to explain why you are introducing the certificate concept I to this discussion?\nX.509 Certificates?\nA digital certificate of some other kind?\n\nI have absolutely no clue as to why you introduced the word 'certificate'\n\nSometimes people who read 'PKI', 'think' that it is about certificates, for some mental model where X.509 was the first time they learned about PKI\n\nBut PKI is not about certificates - certificates can be an implementation details related to PKI\n\nPublic key infrastructure, is about, at its core, solving the assurance problems that arise when entity A and entity B have no prior means of secure public key exchange, therefore they need to establish trustworthy (verifiable) infrastructure to securely share the public keys\n\nSometimes, due to the mental model this confusion may arise\n\nLet's just stick to public keys and I'll ignore any introduction of certificates from now on unless you are specific as to how certificates apply here (because I have no idea why anyone would discuss certificates here at all)\n\nBut going back to your point, for clarity \n\n> Public keys (which are not certificates) \n\nCertificates are inherently public keys, with extensions and extra meta data. So a public key is what I said, and a public key can be a certificate too (but not in this context, so I can understand your confusion)\n\nA public key, specifically JWS if you prefer to focus on one at a time. So, one no longer presented in the JWKS is as the jwt.io Introduction page describes - would make it no longer verifiable and therefore inherently revoked\n\nThis reply was far too long, but I feel it really helps with education on some fundamentals of JWT that are being missed in this discussion. Hopefully you can now reread the OP and address this productively.",
          "createdAt": "2025-05-03T01:56:44Z",
          "updatedAt": "2025-05-03T02:15:43Z"
        }
      ]
    },
    {
      "number": 12,
      "id": "I_kwDOOEwV6s6yOzOr",
      "title": "token replay resilience mechanisms",
      "url": "https://github.com/identitymonk/draft-lombardo-oauth-client-extension-claims/issues/12",
      "state": "OPEN",
      "author": "0x73746F66",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The specification doesn't address how these claims interact with token replay protection measures, especially when tokens include client authentication details",
      "createdAt": "2025-04-12T05:12:25Z",
      "updatedAt": "2025-05-03T01:22:02Z",
      "closedAt": null,
      "comments": [
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "I am not sure to follow. Here we are just specifying that a JWT profile OAuth2 Access Token will have more claims inside them and their purpose.\nAs this extends the [JWT profile for OAuth2 Access Token (RFC9068)](https://datatracker.ietf.org/doc/html/rfc9068) all the guidance for replay protection as issuance and usage applies.\n\nWhat new risk do you foresee here that is not covered?",
          "createdAt": "2025-04-13T20:09:09Z",
          "updatedAt": "2025-04-13T20:09:09Z"
        },
        {
          "author": "0x73746F66",
          "authorAssociation": "NONE",
          "body": "A bearer token, by definition, grants access to whoever possesses it, regardless of how it was originally obtained.\nThe fundamental issue is that adding these new claims (gty, cxt, ccr, and cmr) to a bearer token doesn't actually achive their intended function..\n\nIf a Resource Server implements authorization policies based on these claims (e.g., \"only allow access if PKCE was used\"), an attacker who obtains a token through a replay attack would benefit from these claims despite never having actually used PKCE.\n\nWe see this with JWT+MFA, an attacker with the bearer token benefits fromteh owner having done MFA and is not impeded at all.",
          "createdAt": "2025-04-25T14:02:25Z",
          "updatedAt": "2025-04-25T14:02:25Z"
        },
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "You are at the wrong place pal. This spec is not a sender constraint mechanism. This is to provide more information on what happened at the AS so that the RS can have more data to take a decision. Nothing more, nothing less. \n\nWe (the authors) try to force for more metadata.\n\nIf you want token replay mechanism please go look at [DPoP / RFC9449](https://datatracker.ietf.org/doc/html/rfc9449) or [HTTP Message Signature / RFC9421](https://datatracker.ietf.org/doc/html/rfc9421) which can be used conjointly to what we propose as long as to any [JWT profiled Access Tokens](https://datatracker.ietf.org/doc/html/rfc9068) currently specified.\n\nI think you over read the proposal to something this is not. And while your comments, threats you described, or features you are looking for are interesting, this is not the RFC you are looking for.",
          "createdAt": "2025-04-28T20:50:51Z",
          "updatedAt": "2025-04-28T20:50:51Z"
        },
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "On your example:\n> only allow access if PKCE was used\n\nI will re-read how we express it. But the mean was to express a guardrail, in the sense of \"if PKCE was not use don't even look at it, fail fast\" not as a finite requirement. For sure, \"do you have the right scope?\", \"does the claim `project` equal to `phoenix`?\" or any other rule of access will still applies.\n\nThe problem we are describing in fact the contrary. Actually FAPI requires that clients are client certificate authenticated, SMART on FHIR requires that clients are Private JWT authenticated... but the RP has no meaningful way to know if this was effectively the case. The RP only sees that `scope contains the right value` and `claim project has a value of phoenix`.\n\nThis proposal is here to allow the RP to conditions as stated in frameworks that govern the disclosure of associated resources.",
          "createdAt": "2025-04-28T21:03:16Z",
          "updatedAt": "2025-04-28T21:03:16Z"
        },
        {
          "author": "0x73746F66",
          "authorAssociation": "NONE",
          "body": "> You are at the wrong place pal. This spec is not a sender constraint mechanism. This is to provide more information on what happened at the AS so that the RS can have more data to take a decision. Nothing more, nothing less. \n> \n> We (the authors) try to force for more metadata.\n> \n> If you want token replay mechanism please go look at [DPoP / RFC9449](https://datatracker.ietf.org/doc/html/rfc9449) or [HTTP Message Signature / RFC9421](https://datatracker.ietf.org/doc/html/rfc9421) which can be used conjointly to what we propose as long as to any [JWT profiled Access Tokens](https://datatracker.ietf.org/doc/html/rfc9068) currently specified.\n> \n> I think you over read the proposal to something this is not. And while your comments, threats you described, or features you are looking for are interesting, this is not the RFC you are looking for.\n\nAll of that is valid only if I was here looking for a spec update to provide replay resistance to all of JWT\n\nThat, is not what I said, not once.\n\nGiven I said what I did, let's get back on track. Your following reply is closer, we are adding more metadata here, and we'd really like to be assured on the RS side of the 'trustworthiness' of the AS provided metadata - ergo, we assume it was the AS we think it is because they used the public key to sign the data and we are able to verify they used the public key too. But who else can sign the metadata into a JWT using the public key? Anyone.\n\nSo, if this spec needs an RS to, as you say, decide... Would you not want assurance the provided metadata was... Trustworthy??? Are we talking about the same security mechanisms now? Please let me know if you require more information to understand these points of assurance and verifiable trust",
          "createdAt": "2025-05-03T01:22:01Z",
          "updatedAt": "2025-05-03T01:22:01Z"
        }
      ]
    },
    {
      "number": 13,
      "id": "I_kwDOOEwV6s6yOzSY",
      "title": "validation requirements for resource servers",
      "url": "https://github.com/identitymonk/draft-lombardo-oauth-client-extension-claims/issues/13",
      "state": "OPEN",
      "author": "0x73746F66",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The gty and cxt claims lack explicit validation requirements for resource servers",
      "createdAt": "2025-04-12T05:13:00Z",
      "updatedAt": "2025-04-13T20:51:52Z",
      "closedAt": null,
      "comments": [
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "I am sorry, I am not sure to follow. The IANA section [8. ](https://identitymonk.github.io/draft-lombardo-oauth-client-extension-claims/draft-lombardo-oauth-client-extension-claims.html#section-8)[IANA Considerations](https://identitymonk.github.io/draft-lombardo-oauth-client-extension-claims/draft-lombardo-oauth-client-extension-claims.html#name-iana-considerations) describes the values that will registered and expected out of the claims.\n\nCan you describe what you would propose as additional information please?",
          "createdAt": "2025-04-13T20:04:44Z",
          "updatedAt": "2025-04-13T20:04:44Z"
        },
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "Thinking adding a section about `Processing Rules`",
          "createdAt": "2025-04-13T20:51:52Z",
          "updatedAt": "2025-04-13T20:51:52Z"
        }
      ]
    },
    {
      "number": 14,
      "id": "I_kwDOOEwV6s6yOzWg",
      "title": "Risk when allowing arbitrary URIs",
      "url": "https://github.com/identitymonk/draft-lombardo-oauth-client-extension-claims/issues/14",
      "state": "OPEN",
      "author": "0x73746F66",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The ccr claim allows arbitrary URIs leading to inconsistent interpretation of client authentication strength across different systems at best, SSRF at worst ",
      "createdAt": "2025-04-12T05:13:43Z",
      "updatedAt": "2025-05-03T04:46:05Z",
      "closedAt": null,
      "comments": [
        {
          "author": "0x73746F66",
          "authorAssociation": "NONE",
          "body": "I suggest avoid ambiguous \"absolute Uri\" as this may lead to SSRF, instead define a core set of standard URNs in the `urn:ietf:params:oauth:client-acr` namespace with precise security characteristics\n\nWhen custom values are needed, require use of URNs rather than URLs to prevent SSRF\n\nAnd always include validation requirements for processors, like encourage the resource servers to pre-validated (allow listing) a domain used to validate the URN segment before calling",
          "createdAt": "2025-04-12T12:20:21Z",
          "updatedAt": "2025-04-12T12:20:21Z"
        },
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "Though more about that. I think your point is covered with the description already provided:\n- The value of this claim must be an absolute URI that can be registered with IANA. \n  - We can replace the `can` with a true \u00a0`SHOULD` keyword.\n- If IANA registered URIs are used, then their meaning and semantics should be respected and used as defined in the registry.\n  - This constrains both the AS and the RP\n-  Parties using this custom claim values need to agree upon the semantics of the values used, which may be context specific.\n   - This allows for URI not in IANA / not governed by IETF spaces like FAPI and NIST SP-800-63 based definitions to exist. It allows reinforce the legitimacy of any RP to have the final word on access control. It they don't know what the value means, then it should  be discarded.",
          "createdAt": "2025-04-14T14:20:51Z",
          "updatedAt": "2025-04-15T14:19:20Z"
        },
        {
          "author": "0x73746F66",
          "authorAssociation": "NONE",
          "body": "So, we just tell attackers not to use SSRS when the spec allows SSRS by design? IANA can't design a URI that resists SSRS, the spec has to be clear about what acceptable URI varients are safe to use for this protocol )other protocols can use all or other varients of a URI than this accepts), and have a security best practice section that would specify anti-patters and to avoid those by describing what good looks like.",
          "createdAt": "2025-04-25T13:31:13Z",
          "updatedAt": "2025-04-25T13:31:13Z"
        },
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "What do you mean as attackers, can you elaborate the threat with a flow? SSRS is a famility of attack vector, I need a flow to understand what you want me to mitigate.\n\n Client does not send any of those values. It is the AS that set the values based on how the Client authentication was performed and the AS way to size it.\n\n- If your point is that a malicious AS can issue tokens with a bad SSRS value, then they can do that with any claims of the token.\n- If your point is that the Client might replace the value of the token by one of malicious own, then it will break the signature.",
          "createdAt": "2025-04-28T20:39:05Z",
          "updatedAt": "2025-04-28T20:39:05Z"
        },
        {
          "author": "0x73746F66",
          "authorAssociation": "NONE",
          "body": "> What do you mean as attackers, can you elaborate the threat with a flow? SSRS is a famility of attack vector, I need a flow to understand what you want me to mitigate.\n> \n>  Client does not send any of those values. It is the AS that set the values based on how the Client authentication was performed and the AS way to size it.\n> \n> - If your point is that a malicious AS can issue tokens with a bad SSRS value, then they can do that with any claims of the token.\n> - If your point is that the Client might replace the value of the token by one of malicious own, then it will break the signature.\n\n\n> the Client might replace the value of the token by one of malicious own\n\nNo, it will break the signature - exactly \n\n> a malicious AS can issue tokens with a bad SSRS value, then they can do that with any claims of the token\n\nYes, and for the reason you said; they can do that with any claims of the token. But before this spec, those other claims are defined  by other specs and not being defined in this spec\n\nFor this spec, you should be providing assurances for the claims you are introducing - so, knowing these known knowns today (that previous specs not have known that the time, and are vulnerable with the knowledge we have today) knowing that this is a vector, for these claims, provide guidance in this spec, to ensure that verification of values is not vulnerable to such 'known' attack vectors - right?",
          "createdAt": "2025-05-03T04:46:03Z",
          "updatedAt": "2025-05-03T04:46:03Z"
        }
      ]
    },
    {
      "number": 15,
      "id": "I_kwDOOEwV6s6yTkEB",
      "title": "Describing the relations to the requirements of FAPI 2.0 Security Profiles and SMART on FHIR v5",
      "url": "https://github.com/identitymonk/draft-lombardo-oauth-client-extension-claims/issues/15",
      "state": "OPEN",
      "author": "identitymonk",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Those two frameworks require some explicit type of authentication for clients when they request OAuth2 tokens from the AS.\n\nThis specification proposal aims to provide actionable information in the tokens about those elements for the resource providers to assure, as part of their access control evaluation, that the basic framework requirements are met.\n\nThis should be described in the Introduction.",
      "createdAt": "2025-04-13T20:44:31Z",
      "updatedAt": "2025-04-13T20:44:31Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 16,
      "id": "I_kwDOOEwV6s6yTktz",
      "title": "IANA value registration process description",
      "url": "https://github.com/identitymonk/draft-lombardo-oauth-client-extension-claims/issues/16",
      "state": "OPEN",
      "author": "identitymonk",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Need to add the following text in the IANA section:\n\n--------- beginning ---------\nThe following registration procedure is used for the registry established by this specification.\n\nValues are registered on a Specification Required [RFC8126] basis after a two-week review period on the [oauth-ext-review@ietf.org](mailto:oauth-ext-review@ietf.org) mailing list, on the advice of one or more Designated Experts. However, to allow for the allocation of values prior to publication of the final version of a specification, the Designated Experts may approve registration once they are satisfied that the specification will be completed and published. However, if the specification is not completed and published in a timely manner, as determined by the Designated Experts, the Designated Experts may request that IANA withdraw the registration.\n\nRegistration requests sent to the mailing list for review should use an appropriate subject (e.g., \"Request to register JWT profiled OAuth2 Access Token client extensions: example\").\n\nWithin the review period, the Designated Experts will either approve or deny the registration request, communicating this decision to the review list and IANA. Denials should include an explanation and, if applicable, suggestions as to how to make the request successful. The IANA escalation process is followed when the Designated Experts are not responsive within 14 days.\n\nCriteria that should be applied by the Designated Experts includes determining whether the proposed registration duplicates existing functionality, determining whether it is likely to be of general applicability or whether it is useful only for a single application, and whether the registration makes sense.\n\nIANA must only accept registry updates from the Designated Experts and should direct all requests for registration to the review mailing list.\n\nIt is suggested that multiple Designated Experts be appointed who are able to represent the perspectives of different applications using this specification, in order to enable broadly-informed review of registration decisions. In cases where a registration decision could be perceived as creating a conflict of interest for a particular Expert, that Expert should defer to the judgment of the other Experts.\n\nThe reason for the use of the mailing list is to enable public review of registration requests, enabling both Designated Experts and other interested parties to provide feedback on proposed registrations. The reason to allow the Designated Experts to allocate values prior to publication as a final specification is to enable giving authors of specifications proposing registrations the benefit of review by the Designated Experts before the specification is completely done, so that if problems are identified, the authors can iterate and fix them before publication of the final specification.\n--------- end ---------",
      "createdAt": "2025-04-13T20:50:39Z",
      "updatedAt": "2025-04-13T20:50:39Z",
      "closedAt": null,
      "comments": []
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "PR_kwDOOEwV6s6R1tdC",
      "title": "Draft 00 - with formatting of links",
      "url": "https://github.com/identitymonk/draft-lombardo-oauth-client-extension-claims/pull/1",
      "state": "MERGED",
      "author": "identitymonk",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-04-08T19:25:15Z",
      "updatedAt": "2025-04-08T19:41:29Z",
      "baseRepository": "identitymonk/draft-lombardo-oauth-client-extension-claims",
      "baseRefName": "main",
      "baseRefOid": "86b0bc47fc990bc732712ce79aef78cd99dc4fe9",
      "headRepository": "identitymonk/draft-lombardo-oauth-client-extension-claims",
      "headRefName": "Draft-00",
      "headRefOid": "d2c4958cb6b0e7a92a2ea15ca2663226daa82f16",
      "closedAt": "2025-04-08T19:41:29Z",
      "mergedAt": "2025-04-08T19:41:29Z",
      "mergedBy": "identitymonk",
      "mergeCommit": {
        "oid": "3236b2ba758a0529c8731880d1e151aefeff568d"
      },
      "comments": [
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "@baboulebou can you review this PR please?",
          "createdAt": "2025-04-08T19:32:05Z",
          "updatedAt": "2025-04-08T19:32:05Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOOEwV6s6j_BOn",
          "commit": {
            "abbreviatedOid": "d2c4958"
          },
          "author": "baboulebou",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-04-08T19:40:22Z",
          "updatedAt": "2025-04-08T19:40:22Z",
          "comments": []
        }
      ]
    },
    {
      "number": 2,
      "id": "PR_kwDOOEwV6s6SR2_z",
      "title": "update to Draft-00",
      "url": "https://github.com/identitymonk/draft-lombardo-oauth-client-extension-claims/pull/2",
      "state": "MERGED",
      "author": "identitymonk",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Latest changes for author, and references ",
      "createdAt": "2025-04-11T15:43:31Z",
      "updatedAt": "2025-04-11T16:22:48Z",
      "baseRepository": "identitymonk/draft-lombardo-oauth-client-extension-claims",
      "baseRefName": "main",
      "baseRefOid": "3236b2ba758a0529c8731880d1e151aefeff568d",
      "headRepository": "identitymonk/draft-lombardo-oauth-client-extension-claims",
      "headRefName": "Draft-00",
      "headRefOid": "2c33d3138865f4dd74db646d8c9aa1596ef12473",
      "closedAt": "2025-04-11T16:22:48Z",
      "mergedAt": "2025-04-11T16:22:47Z",
      "mergedBy": "identitymonk",
      "mergeCommit": {
        "oid": "9177ef748d41d64b24066aa0413b9df0c4c93359"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOOEwV6s6kjxVx",
          "commit": {
            "abbreviatedOid": "2c33d31"
          },
          "author": "baboulebou",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-04-11T16:02:33Z",
          "updatedAt": "2025-04-11T16:02:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 3,
      "id": "PR_kwDOOEwV6s6SSSIq",
      "title": "Last update from Jeff",
      "url": "https://github.com/identitymonk/draft-lombardo-oauth-client-extension-claims/pull/3",
      "state": "MERGED",
      "author": "identitymonk",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "- add WPT\r\n- change email for Jeff",
      "createdAt": "2025-04-11T16:32:00Z",
      "updatedAt": "2025-04-11T16:59:04Z",
      "baseRepository": "identitymonk/draft-lombardo-oauth-client-extension-claims",
      "baseRefName": "main",
      "baseRefOid": "9177ef748d41d64b24066aa0413b9df0c4c93359",
      "headRepository": "identitymonk/draft-lombardo-oauth-client-extension-claims",
      "headRefName": "Draft-00",
      "headRefOid": "e136a70f2c983f44077fc26d9983f8066ce33e59",
      "closedAt": "2025-04-11T16:56:58Z",
      "mergedAt": "2025-04-11T16:56:58Z",
      "mergedBy": "identitymonk",
      "mergeCommit": {
        "oid": "b1f8d1e09dba2bc103560ef6f04b996953fdec50"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOOEwV6s6kkLUG",
          "commit": {
            "abbreviatedOid": "e136a70"
          },
          "author": "baboulebou",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-04-11T16:45:11Z",
          "updatedAt": "2025-04-11T16:45:11Z",
          "comments": []
        }
      ]
    },
    {
      "number": 4,
      "id": "PR_kwDOOEwV6s6SSfBk",
      "title": "Draft 01",
      "url": "https://github.com/identitymonk/draft-lombardo-oauth-client-extension-claims/pull/4",
      "state": "MERGED",
      "author": "baboulebou",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "My changes and corrections to the initial draft...",
      "createdAt": "2025-04-11T16:59:09Z",
      "updatedAt": "2025-04-11T17:54:47Z",
      "baseRepository": "identitymonk/draft-lombardo-oauth-client-extension-claims",
      "baseRefName": "main",
      "baseRefOid": "b1f8d1e09dba2bc103560ef6f04b996953fdec50",
      "headRepository": "identitymonk/draft-lombardo-oauth-client-extension-claims",
      "headRefName": "Draft-01",
      "headRefOid": "d8d3063b3b29fc008427805da5f5d387fa726045",
      "closedAt": "2025-04-11T17:54:36Z",
      "mergedAt": "2025-04-11T17:54:36Z",
      "mergedBy": "identitymonk",
      "mergeCommit": {
        "oid": "cfdeac3e47a5659d796c0d5542f15f192c0a8436"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOOEwV6s6kkZQB",
          "commit": {
            "abbreviatedOid": "d8d3063"
          },
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "I approve those changes",
          "createdAt": "2025-04-11T17:09:42Z",
          "updatedAt": "2025-04-11T17:09:42Z",
          "comments": []
        }
      ]
    },
    {
      "number": 5,
      "id": "PR_kwDOOEwV6s6STCq0",
      "title": "Update publish.yml",
      "url": "https://github.com/identitymonk/draft-lombardo-oauth-client-extension-claims/pull/5",
      "state": "MERGED",
      "author": "identitymonk",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Try too fix upload of Draft-00",
      "createdAt": "2025-04-11T18:07:43Z",
      "updatedAt": "2025-04-11T18:10:32Z",
      "baseRepository": "identitymonk/draft-lombardo-oauth-client-extension-claims",
      "baseRefName": "main",
      "baseRefOid": "cfdeac3e47a5659d796c0d5542f15f192c0a8436",
      "headRepository": "identitymonk/draft-lombardo-oauth-client-extension-claims",
      "headRefName": "identitymonk-patch-1-1",
      "headRefOid": "78a5b56a217d2ca4d336b6a9f9b57904fea5731b",
      "closedAt": "2025-04-11T18:10:17Z",
      "mergedAt": "2025-04-11T18:10:17Z",
      "mergedBy": "identitymonk",
      "mergeCommit": {
        "oid": "3f0ab196667ca3cb12e7d4a55a355549c83b0c74"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOOEwV6s6klGSx",
          "commit": {
            "abbreviatedOid": "78a5b56"
          },
          "author": "baboulebou",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-04-11T18:09:01Z",
          "updatedAt": "2025-04-11T18:09:01Z",
          "comments": []
        }
      ]
    },
    {
      "number": 6,
      "id": "PR_kwDOOEwV6s6STFF9",
      "title": "Update publish.yml",
      "url": "https://github.com/identitymonk/draft-lombardo-oauth-client-extension-claims/pull/6",
      "state": "CLOSED",
      "author": "identitymonk",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-04-11T18:12:49Z",
      "updatedAt": "2025-04-11T18:17:27Z",
      "baseRepository": "identitymonk/draft-lombardo-oauth-client-extension-claims",
      "baseRefName": "main",
      "baseRefOid": "3f0ab196667ca3cb12e7d4a55a355549c83b0c74",
      "headRepository": "identitymonk/draft-lombardo-oauth-client-extension-claims",
      "headRefName": "identitymonk-patch-1",
      "headRefOid": "487e764326f536ebf85740756ff9ed3fa90be51b",
      "closedAt": "2025-04-11T18:13:59Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 7,
      "id": "PR_kwDOOEwV6s6STGTH",
      "title": "Update publish.yml",
      "url": "https://github.com/identitymonk/draft-lombardo-oauth-client-extension-claims/pull/7",
      "state": "MERGED",
      "author": "identitymonk",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-04-11T18:15:37Z",
      "updatedAt": "2025-04-11T18:17:26Z",
      "baseRepository": "identitymonk/draft-lombardo-oauth-client-extension-claims",
      "baseRefName": "main",
      "baseRefOid": "3f0ab196667ca3cb12e7d4a55a355549c83b0c74",
      "headRepository": "identitymonk/draft-lombardo-oauth-client-extension-claims",
      "headRefName": "identitymonk-patch-1",
      "headRefOid": "487e764326f536ebf85740756ff9ed3fa90be51b",
      "closedAt": "2025-04-11T18:17:12Z",
      "mergedAt": "2025-04-11T18:17:12Z",
      "mergedBy": "identitymonk",
      "mergeCommit": {
        "oid": "3eb9e0083c8e62219fc7fd03d6c25c34ffcb4f92"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOOEwV6s6klLS6",
          "commit": {
            "abbreviatedOid": "487e764"
          },
          "author": "baboulebou",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-04-11T18:17:00Z",
          "updatedAt": "2025-04-11T18:17:00Z",
          "comments": []
        }
      ]
    }
  ]
}